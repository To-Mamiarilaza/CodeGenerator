{
    "framework": ["spring", "ituFramework", ".net"],
    "frameworkCompatibility": {
        "JAVA": ["spring", "ituFramework"],
        "C#": [".net"]
    },
    "controllerImports": {
        "spring": {
            "REST": [
                "org.springframework.beans.factory.annotation.Autowired",
                "org.springframework.http.ResponseEntity",
                "org.springframework.http.HttpStatus",
                "org.springframework.web.bind.annotation.*",
                "java.util.List",
                "java.util.Optional",
                "org.springframework.data.domain.Page",
                "org.springframework.data.domain.PageRequest",
                "org.springframework.data.domain.Pageable"
            ],
            "MVC": [
                "org.springframework.beans.factory.annotation.Autowired",
                "org.springframework.stereotype.Controller",
                "org.springframework.ui.Model",
                "org.springframework.web.bind.annotation.*",
                "org.springframework.web.servlet.mvc.support.RedirectAttributes",
                "java.util.List",
                "java.util.ArrayList"
            ]
        },
        ".net": {
            "REST": [
                "Microsoft.AspNetCore.Mvc",
                "Microsoft.EntityFrameworkCore"
            ],
            "MVC": [
                "Microsoft.AspNetCore.Mvc",
                "Microsoft.AspNetCore.Mvc.Rendering",
                "Microsoft.EntityFrameworkCore"
            ]
        }
    },
    "authRequiredImport": {
        "spring": {
            "REST": [
                "#ExceptionPackage#.NotAuthorizedException",
                "jakarta.servlet.http.HttpServletRequest"
            ],
            "MVC": []
        },
        ".net": {
            "REST": [],
            "MVC": []
        }
    },
    "authentification": {
        "spring": {
            "authControllerTemplate": "java.auth.controller.template",
            "authControllerFileName": "AuthController.java",
            "authUtilTemplate": "java.auth.util.template",
            "authUtilFileName": "JWTToken.java",
            "userRepositoryTemplate": "java.auth.repository.template",
            "userRepositoryName": "UtilisateurRepository.java",
            "customExceptionTemplate": "java.auth.exception.template",
            "customExceptionName": "NotAuthorizedException.java"
        },
        ".net": {
            "authControllerTemplate": "",
            "authControllerFileName": "",
            "authUtilTemplate": "",
            "authUtilFileName": "",
            "userRepositoryTemplate": "",
            "userRepositoryName": "",
            "customExceptionTemplate": "",
            "customExceptionName": ""
        }
    },
    "classAnnotation": {
        "spring": {
            "REST": "@RestController\n@RequestMapping(\"{requestMapping}\")\n@CrossOrigin(origins = \"*\", allowedHeaders = \"*\")",
            "MVC": "@Controller"
        },
        ".net": {
            "REST": "[ApiController]\n[Route(\"{requestMapping}\")]",
            "MVC": null
        }
    },
    "extendsRequirement": {
        "spring": {
            "REST": null,
            "MVC": null
        },
        ".net": {
            "REST": "ControllerBase",
            "MVC": "Controller"
        }
    },
    "dbServiceAnnotation": {
        "spring": {
            "REST": "@Autowired",
            "MVC": "@Autowired"
        },
        ".net": {
            "REST": null,
            "MVC": null
        }
    },
    "dbServiceDeclaration": {
        "spring": {
            "REST": "private {dbServiceType} {dbServiceFieldName};",
            "MVC": "private {dbServiceType} {dbServiceFieldName};"
        },
        ".net": {
            "REST": "private readonly {dbServiceType} _{dbServiceFieldName};",
            "MVC": "private readonly {dbServiceType} _{dbServiceFieldName};"
        }
    },
    "FKEntityStateParameter": {
        "spring": {
            "REST": null,
            "MVC": null
        },
        ".net": {
            "REST": "_{dbServiceFieldName}.Entry({typeFieldName}.{fkField}).State = EntityState.Unchanged;",
            "MVC": "_{dbServiceFieldName}.Entry({typeFieldName}.{fkField}).State = EntityState.Unchanged;"
        }
    },
    "constructor": {
        "spring": {
            "REST": null,
            "MVC": null
        },
        ".net": {
            "REST": "public {controllerName}({dbServiceType} {dbServiceFieldName}) {\n_{dbServiceFieldName} = {dbServiceFieldName};\n}",
            "MVC": "public {controllerName}({dbServiceType} {dbServiceFieldName}) {\n_{dbServiceFieldName} = {dbServiceFieldName};\n}"
        }
    },
    "selectOptionsPassing": {
        "spring": "model.addAttribute(\"{typeFieldName}s\", {typeFieldName}Repository.findAll());",
        ".net": "ViewData[\"{typeFieldName}s\"] = new SelectList(_context.Set<{typeFieldName}>(), \"{pkFieldName}\", \"{fkDisplayField}\");"
    },
    "CRUDMethods": {
        "getAll": {
            "annotation": {
                "spring": {
                    "REST": "@GetMapping",
                    "MVC": "@GetMapping(\"/{typeFieldName}s\")"
                },
                ".net": {
                    "REST": "[HttpGet]",
                    "MVC": null
                }
            },
            "returnType": {
                "spring": {
                    "REST": "ResponseEntity<Page<{type}>>",
                    "MVC": "String"
                },
                ".net": {
                    "REST": "async Task<ActionResult<IEnumerable<{type}>>>",
                    "MVC": "async Task<IActionResult>"
                }
            },
            "declaration": {
                "spring": {
                    "REST": {
                        "noAuth": "getAll{type}s(@RequestParam(name = \"page\",defaultValue = \"0\") Integer page, @RequestParam(name = \"size\",defaultValue = \"5\") Integer size)",
                        "withAuth": "getAll{type}s(@RequestParam(name = \"page\",defaultValue = \"0\") Integer page, @RequestParam(name = \"size\",defaultValue = \"5\") Integer size, HttpServletRequest request)"
                    },
                    "MVC": {
                        "noAuth": "getAll(Model model)",
                        "withAuth": "getAll(Model model)"
                    }
                },
                ".net": {
                    "REST": {
                        "noAuth": "GetAll{type}s()",
                        "withAuth": "GetAll{type}s()"
                    },
                    "MVC": {
                        "noAuth": "Index()",
                        "withAuth": "Index()"
                    }
                }
            },
            "content": {
                "spring": {
                    "REST": {
                        "noAuth": "try {\n Pageable pageable = PageRequest.of(page, size);\n Page<{type}> {typeFieldName}s = {dbServiceFieldName}.findAll(pageable);\n if ({typeFieldName}s.isEmpty()) {\n return new ResponseEntity<>(HttpStatus.NO_CONTENT);\n }\n return new ResponseEntity<>({typeFieldName}s, HttpStatus.OK);\n }\n catch (Exception e) {\n return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);\n }",
                        "withAuth": "try {\n JWTToken.checkBearer(request);\n Pageable pageable = PageRequest.of(page, size);\n Page<{type}> {typeFieldName}s = {dbServiceFieldName}.findAll(pageable);\n if ({typeFieldName}s.isEmpty()) {\n return new ResponseEntity<>(HttpStatus.NO_CONTENT);\n }\n return new ResponseEntity<>({typeFieldName}s, HttpStatus.OK);\n }\n catch(NotAuthorizedException e) {\n return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);\n } \n catch (Exception e) {\n return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);\n }"
                    },
                    "MVC": {
                        "noAuth":"try {\n List<{type}> {typeFieldName}s = new ArrayList<{type}>();\n {dbServiceFieldName}.findAll().forEach({typeFieldName}s::add);\n\n model.addAttribute(\"{typeFieldName}s\", {typeFieldName}s);\n }\n catch (Exception e) {\n      e.printStackTrace();\n    }\n\n    return \"{typeFieldName}/{typeFieldName}s\";",
                        "withAuth": "try {\n List<{type}> {typeFieldName}s = new ArrayList<{type}>();\n {dbServiceFieldName}.findAll().forEach({typeFieldName}s::add);\n\n model.addAttribute(\"{typeFieldName}s\", {typeFieldName}s);\n }\n catch (Exception e) {\n      e.printStackTrace();\n    }\n\n    return \"{typeFieldName}/{typeFieldName}s\";"
                    }
                },
                ".net": {
                    "REST": {
                        "noAuth": "return await _{dbServiceFieldName}.{type}s.{FKIncludes}ToListAsync();",
                        "withAuth": "return await _{dbServiceFieldName}.{type}s.{FKIncludes}ToListAsync();"
                    },
                    "MVC": {
                        "noAuth": "return View(await _{dbServiceFieldName}.{type}s.{FKIncludes}ToListAsync());",
                        "withAuth": "return View(await _{dbServiceFieldName}.{type}s.{FKIncludes}ToListAsync());"
                    }
                }
            }
        },
        "getById": {
            "annotation": {
                "spring": {
                    "REST": "@GetMapping(\"/{{lowerPkFieldName}}\")",
                    "MVC": "@GetMapping(\"/{typeFieldName}s/{{lowerPkFieldName}}\")"
                },
                ".net": {
                "REST": "[HttpGet(\"{{lowerPkFieldName}}\")]",
                "MVC": null
                }
            },
            "returnType": {
                "spring": {
                    "REST": "ResponseEntity<{type}>",
                    "MVC": "String"
                },
                ".net": {
                    "REST": "async Task<ActionResult<{type}>>",
                    "MVC": "async Task<IActionResult>"
                }
            },
            "declaration": {
                "spring": {
                    "REST": {
                        "noAuth": "get{type}ById(@PathVariable {pkFieldType} {lowerPkFieldName})",
                        "withAuth": "get{type}ById(@PathVariable {pkFieldType} {lowerPkFieldName}, HttpServletRequest request)"
                    },
                    "MVC": {
                        "noAuth": "edit{type}(@PathVariable(\"{lowerPkFieldName}\") {pkFieldType} {lowerPkFieldName}, Model model, RedirectAttributes redirectAttributes)",
                        "withAuth": "edit{type}(@PathVariable(\"{lowerPkFieldName}\") {pkFieldType} {lowerPkFieldName}, Model model, RedirectAttributes redirectAttributes)"
                    }
                },
                ".net": {
                    "REST": {
                        "noAuth": "Get{type}ById({pkFieldType} {lowerPkFieldName})",
                        "withAuth": "Get{type}ById({pkFieldType} {lowerPkFieldName})"
                    },
                    "MVC": {
                        "noAuth": "Edit({pkFieldType}? id)",
                        "withAuth": "Edit({pkFieldType}? id)" 
                    }
                }
            },
            "content": {
                "spring": {
                    "REST": {
                        "noAuth": "Optional<{type}> {typeFieldName}Data = {dbServiceFieldName}.findById({lowerPkFieldName});\n\n if ({typeFieldName}Data.isPresent()) {\n return new ResponseEntity<>({typeFieldName}Data.get(), HttpStatus.OK);\n }\n else {\n return new ResponseEntity<>(HttpStatus.NOT_FOUND);\n }",
                        "withAuth": "try { \n JWTToken.checkBearer(request);\n } catch(NotAuthorizedException e) {\n return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);\n }\n Optional<{type}> {typeFieldName}Data = {dbServiceFieldName}.findById({lowerPkFieldName});\n\n if ({typeFieldName}Data.isPresent()) {\n return new ResponseEntity<>({typeFieldName}Data.get(), HttpStatus.OK);\n }\n else {\n return new ResponseEntity<>(HttpStatus.NOT_FOUND);\n }"
                    },
                    "MVC": {
                        "noAuth": "try {\n      {type} {typeFieldName} = {dbServiceFieldName}.findById({lowerPkFieldName}).get();\n\n      {FKSelectOptions}model.addAttribute(\"{typeFieldName}\", {typeFieldName});\n      model.addAttribute(\"pageTitle\", \"Edit {type}\");\n\n      return \"{typeFieldName}/{typeFieldName}_form\";\n    }\n catch (Exception e) {\n      e.printStackTrace();\n return \"redirect:/{typeFieldName}s\";\n   }",
                        "withAuth": "try {\n      {type} {typeFieldName} = {dbServiceFieldName}.findById({lowerPkFieldName}).get();\n\n      {FKSelectOptions}model.addAttribute(\"{typeFieldName}\", {typeFieldName});\n      model.addAttribute(\"pageTitle\", \"Edit {type}\");\n\n      return \"{typeFieldName}/{typeFieldName}_form\";\n    }\n catch (Exception e) {\n      e.printStackTrace();\n return \"redirect:/{typeFieldName}s\";\n   }"
                    }
                },
                ".net": {
                    "REST": {
                        "noAuth": "var {typeFieldName} = await _{dbServiceFieldName}.{type}s.{FKIncludes}FirstOrDefaultAsync({objectFirstLetter} => {objectFirstLetter}.{pkFieldName} == {lowerPkFieldName});\n\n if({typeFieldName} == null) {\n return NotFound();\n }\n\nreturn {typeFieldName};",
                        "withAuth": "var {typeFieldName} = await _{dbServiceFieldName}.{type}s.{FKIncludes}FirstOrDefaultAsync({objectFirstLetter} => {objectFirstLetter}.{pkFieldName} == {lowerPkFieldName});\n\n if({typeFieldName} == null) {\n return NotFound();\n }\n\nreturn {typeFieldName};"
                    },
                    "MVC": {
                        "noAuth": "if (id == null)\n {\n return NotFound();\n }\n var {typeFieldName} = await _{dbServiceFieldName}.{type}s.{FKIncludes}FirstOrDefaultAsync({objectFirstLetter} => {objectFirstLetter}.{pkFieldName} == id);\n if({typeFieldName} == null)\n{\nreturn NotFound();\n}\n\n{FKSelectOptions}return View(\"{type}Form\", {typeFieldName});",
                        "withAuth": "if (id == null)\n {\n return NotFound();\n }\n var {typeFieldName} = await _{dbServiceFieldName}.{type}s.{FKIncludes}FirstOrDefaultAsync({objectFirstLetter} => {objectFirstLetter}.{pkFieldName} == id);\n if({typeFieldName} == null)\n{\nreturn NotFound();\n}\n\n{FKSelectOptions}return View(\"{type}Form\", {typeFieldName});"
                    }
                }
            }
        },
        "create": {
            "annotation": {
                "spring": {
                    "REST": "@PostMapping",
                    "MVC": "@GetMapping(\"/{typeFieldName}s/new\")"
                },
                ".net": {
                    "REST": "[HttpPost]",
                    "MVC": null
                }
            },
            "returnType": {
                "spring": {
                    "REST": "ResponseEntity<{type}>",
                    "MVC": "String"
                },
                ".net": {
                    "REST": "async Task<ActionResult<{type}>>",
                    "MVC": "IActionResult"
                }
            },
            "declaration": {
                "spring": {
                    "REST": {
                        "noAuth": "create{type}(@RequestBody {type} {typeFieldName})",
                        "withAuth": "create{type}(@RequestBody {type} {typeFieldName}, HttpServletRequest request)"
                    },
                    "MVC": {
                        "noAuth": "add{type}(Model model)",
                        "withAuth": "add{type}(Model model)"
                    }
                },
                ".net": {
                    "REST": {
                        "noAuth": "Create{type}({type} {typeFieldName})",
                        "withAuth": "Create{type}({type} {typeFieldName})"
                    },
                    "MVC": {
                        "noAuth": "Create()",
                        "withAuth": "Create()"
                    }
                }
            },
            "content": {
                "spring": {
                    "REST": {
                        "noAuth": "try {\n {type} _{typeFieldName} = {dbServiceFieldName}.save({typeFieldName});\n return new ResponseEntity<>(_{typeFieldName}, HttpStatus.CREATED);\n }\n catch(Exception e) {\n return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);\n }",
                        "withAuth": "try {\n JWTToken.checkBearer(request);\n {type} _{typeFieldName} = {dbServiceFieldName}.save({typeFieldName});\n return new ResponseEntity<>(_{typeFieldName}, HttpStatus.CREATED);\n }\n catch(NotAuthorizedException e) {\n return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);\n }\n catch(Exception e) {\n return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);\n }"
                    },
                    "MVC": {
                        "noAuth": "{type} {typeFieldName} = new {type}();\n\n{FKSelectOptions}model.addAttribute(\"{typeFieldName}\", {typeFieldName});\nmodel.addAttribute(\"pageTitle\", \"Create new {type}\");\n\nreturn \"{typeFieldName}/{typeFieldName}_form\";",
                        "withAuth": "{type} {typeFieldName} = new {type}();\n\n{FKSelectOptions}model.addAttribute(\"{typeFieldName}\", {typeFieldName});\nmodel.addAttribute(\"pageTitle\", \"Create new {type}\");\n\nreturn \"{typeFieldName}/{typeFieldName}_form\";"
                    }
                },
                ".net": {
                    "REST": {
                        "noAuth": "{FKEntityStateParameters}_{dbServiceFieldName}.{type}s.Add({typeFieldName});\nawait _{dbServiceFieldName}.SaveChangesAsync();\n\nreturn CreatedAtAction(nameof(Get{type}ById), new { {lowerPkFieldName} = {typeFieldName}.{pkFieldName} }, {typeFieldName});",
                        "withAuth": "{FKEntityStateParameters}_{dbServiceFieldName}.{type}s.Add({typeFieldName});\nawait _{dbServiceFieldName}.SaveChangesAsync();\n\nreturn CreatedAtAction(nameof(Get{type}ById), new { {lowerPkFieldName} = {typeFieldName}.{pkFieldName} }, {typeFieldName});"
                    },
                    "MVC": {
                        "noAuth": "{FKSelectOptions}return View(\"{type}Form\");",
                        "withAuth": "{FKSelectOptions}return View(\"{type}Form\");"
                    }
                }
            }
        },
        "update": {
            "annotation": {
                "spring": {
                    "REST": "@PutMapping(\"/{{lowerPkFieldName}}\")",
                    "MVC": "@PostMapping(\"/{typeFieldName}s/save\")"
                },
                ".net": {
                    "REST": "[HttpPut(\"{{lowerPkFieldName}}\")]",
                    "MVC": "[HttpPost]"
                }
            },
            "returnType": {
                "spring": {
                    "REST": "ResponseEntity<{type}>",
                    "MVC": "String"
                },
                ".net": {
                    "REST": "async Task<IActionResult>",
                    "MVC": "async Task<IActionResult>"
                }
            },
            "declaration": {
                "spring": {
                    "REST": {
                        "noAuth": "update{type}(@PathVariable {pkFieldType} {lowerPkFieldName}, @RequestBody {type} {typeFieldName})",
                        "withAuth": "update{type}(@PathVariable {pkFieldType} {lowerPkFieldName}, @RequestBody {type} {typeFieldName}, HttpServletRequest request)"
                    },
                    "MVC": {
                        "noAuth": "save{type}({type} {typeFieldName}, Model model)",
                        "withAuth": "save{type}({type} {typeFieldName}, Model model)"
                    }
                },
                ".net": {
                    "REST": {
                        "noAuth": "Update{type}({pkFieldType} {lowerPkFieldName}, {type} {typeFieldName})",
                        "withAuth": "Update{type}({pkFieldType} {lowerPkFieldName}, {type} {typeFieldName})" 
                    },
                    "MVC": {
                        "noAuth": "Update({type} {typeFieldName})",
                        "withAuth": "Update({type} {typeFieldName})"
                    }
                }
            },
            "content": {
                "spring": {
                    "REST": {
                        "noAuth": "try{\n if ({lowerPkFieldName} != {typeFieldName}.get{upperPkFieldName}()) {\n return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);\n }\n Optional<{type}> {typeFieldName}Data = {dbServiceFieldName}.findById({lowerPkFieldName});\n if ({typeFieldName}Data.isPresent()) {\n return new ResponseEntity<>({dbServiceFieldName}.save({typeFieldName}), HttpStatus.OK);\n }\n else {\n return new ResponseEntity<>(HttpStatus.NOT_FOUND);\n }\n }\n catch (Exception e) {\n return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);\n }",
                        "withAuth": "try{\n JWTToken.checkBearer(request);\n if ({lowerPkFieldName} != {typeFieldName}.get{upperPkFieldName}()) {\n return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);\n }\n Optional<{type}> {typeFieldName}Data = {dbServiceFieldName}.findById({lowerPkFieldName});\n if ({typeFieldName}Data.isPresent()) {\n return new ResponseEntity<>({dbServiceFieldName}.save({typeFieldName}), HttpStatus.OK);\n }\n else {\n return new ResponseEntity<>(HttpStatus.NOT_FOUND);\n }\n }\n catch(NotAuthorizedException e) {\n return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);\n }\n catch (Exception e) {\n return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);\n }"
                    },
                    "MVC": {
                        "noAuth": "try {\n    {dbServiceFieldName}.save({typeFieldName});\n}\n catch (Exception e) {\n{FKSelectOptions}model.addAttribute(\"errorMessage\", e.getMessage());\nmodel.addAttribute(\"pageTitle\", \"Update {typeFieldName}\");\nmodel.addAttribute(\"{typeFieldName}\", {typeFieldName});\nreturn \"{typeFieldName}/{typeFieldName}_form\";\n}\n\nreturn \"redirect:/{typeFieldName}s\";",
                        "withAuth": "try {\n    {dbServiceFieldName}.save({typeFieldName});\n}\n catch (Exception e) {\n{FKSelectOptions}model.addAttribute(\"errorMessage\", e.getMessage());\nmodel.addAttribute(\"pageTitle\", \"Update {typeFieldName}\");\nmodel.addAttribute(\"{typeFieldName}\", {typeFieldName});\nreturn \"{typeFieldName}/{typeFieldName}_form\";\n}\n\nreturn \"redirect:/{typeFieldName}s\";"
                    }
                },
                ".net": {
                    "REST": {
                        "noAuth": "if ({lowerPkFieldName} != {typeFieldName}.{pkFieldName})\n{\nreturn BadRequest();\n}\n\n{FKEntityStateParameters}_{dbServiceFieldName}.Entry({typeFieldName}).State = EntityState.Modified;\n\ntry\n{\nawait _{dbServiceFieldName}.SaveChangesAsync();\n}\ncatch(DbUpdateConcurrencyException)\n{\nthrow;\n}\n\nreturn NoContent();",
                        "withAuth": "if ({lowerPkFieldName} != {typeFieldName}.{pkFieldName})\n{\nreturn BadRequest();\n}\n\n{FKEntityStateParameters}_{dbServiceFieldName}.Entry({typeFieldName}).State = EntityState.Modified;\n\ntry\n{\nawait _{dbServiceFieldName}.SaveChangesAsync();\n}\ncatch(DbUpdateConcurrencyException)\n{\nthrow;\n}\n\nreturn NoContent();"
                    },
                    "MVC": {
                        "noAuth": "try\n {\n {FKEntityStateParameters}_{dbServiceFieldName}.Update({typeFieldName});\n await _{dbServiceFieldName}.SaveChangesAsync();\n}\ncatch(Exception e)\n{\n{FKSelectOptions}ViewData[\"ErrorMessage\"] = e.InnerException.Message;\nreturn View(\"{type}Form\", {typeFieldName});\n}\nreturn RedirectToAction(nameof(Index));\n;",
                        "withAuth": "try\n {\n {FKEntityStateParameters}_{dbServiceFieldName}.Update({typeFieldName});\n await _{dbServiceFieldName}.SaveChangesAsync();\n}\ncatch(Exception e)\n{\n{FKSelectOptions}ViewData[\"ErrorMessage\"] = e.InnerException.Message;\nreturn View(\"{type}Form\", {typeFieldName});\n}\nreturn RedirectToAction(nameof(Index));\n;"
                    }
                }
            }
        },
        "delete": {
            "annotation": {
                "spring": {
                    "REST": "@DeleteMapping(\"/{{lowerPkFieldName}}\")",
                    "MVC": "@GetMapping(\"/{typeFieldName}s/delete/{{lowerPkFieldName}}\")"
                },
                ".net": {
                    "REST": "[HttpDelete(\"{{lowerPkFieldName}}\")]",
                    "MVC": null
                }
            },
            "returnType": {
                "spring": {
                    "REST": "ResponseEntity<Void>",
                    "MVC": "String"
                },
                ".net": {
                    "REST": "async Task<IActionResult>",
                    "MVC": "async Task<IActionResult>"
                }
            },
            "declaration": {
                "spring": {
                    "REST": {
                        "noAuth": "delete{type}(@PathVariable {pkFieldType} {lowerPkFieldName})",
                        "withAuth": "delete{type}(@PathVariable {pkFieldType} {lowerPkFieldName}, HttpServletRequest request)"
                    },
                    "MVC": {
                        "noAuth": "delete{type}(@PathVariable(\"{lowerPkFieldName}\") {pkFieldType} {lowerPkFieldName}, Model model, RedirectAttributes redirectAttributes)",
                        "withAuth": "delete{type}(@PathVariable(\"{lowerPkFieldName}\") {pkFieldType} {lowerPkFieldName}, Model model, RedirectAttributes redirectAttributes)"
                    }
                },
                ".net": {
                    "REST": {
                        "noAuth": "Delete{type}({pkFieldType} {lowerPkFieldName})",
                        "withAuth": "Delete{type}({pkFieldType} {lowerPkFieldName})"
                    },
                    "MVC": {
                        "noAuth": "Delete({pkFieldType}? id)",
                        "withAuth": "Delete({pkFieldType}? id)"
                    }
                }
            },
            "content": {
                "spring": {
                    "REST": {
                        "noAuth": "try {\n {dbServiceFieldName}.deleteById({lowerPkFieldName});\n return new ResponseEntity<>(HttpStatus.NO_CONTENT);\n }\n catch(Exception e) {\n return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);\n }",
                        "withAuth": "try {\n JWTToken.checkBearer(request);\n {dbServiceFieldName}.deleteById({lowerPkFieldName});\n return new ResponseEntity<>(HttpStatus.NO_CONTENT);\n }\n catch(NotAuthorizedException e) {\n return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);\n }\n catch(Exception e) {\n return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);\n }"
                    },
                    "MVC": {
                        "noAuth": "try {\n    {dbServiceFieldName}.deleteById({lowerPkFieldName});\n}\n catch (Exception e) {\n    e.printStackTrace();\n}\n\nreturn \"redirect:/{typeFieldName}s\";",
                        "withAuth": "try {\n    {dbServiceFieldName}.deleteById({lowerPkFieldName});\n}\n catch (Exception e) {\n    e.printStackTrace();\n}\n\nreturn \"redirect:/{typeFieldName}s\";"
                    }
                },
                ".net": {
                    "REST": {
                        "noAuth": "var {typeFieldName} = await _{dbServiceFieldName}.{type}s.FindAsync({lowerPkFieldName});\nif ({typeFieldName} == null)\n{\nreturn NotFound();\n}\n\n_{dbServiceFieldName}.{type}s.Remove({typeFieldName});\nawait _{dbServiceFieldName}.SaveChangesAsync();\n\nreturn NoContent();",
                        "withAuth": "var {typeFieldName} = await _{dbServiceFieldName}.{type}s.FindAsync({lowerPkFieldName});\nif ({typeFieldName} == null)\n{\nreturn NotFound();\n}\n\n_{dbServiceFieldName}.{type}s.Remove({typeFieldName});\nawait _{dbServiceFieldName}.SaveChangesAsync();\n\nreturn NoContent();"
                    },
                    "MVC": {
                        "noAuth": "if (id == null)\n{\nreturn NotFound();\n}\n\nvar {typeFieldName} = await _{dbServiceFieldName}.{type}s.FindAsync(id);\n\nif ({typeFieldName} == null)\n{\nreturn NotFound();\n}\n\n_{dbServiceFieldName}.{type}s.Remove({typeFieldName});\nawait _{dbServiceFieldName}.SaveChangesAsync();\n\nreturn RedirectToAction(nameof(Index));",
                        "withAuth": "if (id == null)\n{\nreturn NotFound();\n}\n\nvar {typeFieldName} = await _{dbServiceFieldName}.{type}s.FindAsync(id);\n\nif ({typeFieldName} == null)\n{\nreturn NotFound();\n}\n\n_{dbServiceFieldName}.{type}s.Remove({typeFieldName});\nawait _{dbServiceFieldName}.SaveChangesAsync();\n\nreturn RedirectToAction(nameof(Index));"
                    }
                }
            }
        }
    }
    
}